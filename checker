import json
import concurrent.futures
import pyfiglet
import os
import pyrubi


# رنگ‌ها
R = '\033[1;31m'  # قرمز
G = '\033[1;32m'  # سبز
Y = '\033[1;33m'  # زرد
B = '\033[1;34m'  # آبی تیره
M = '\033[1;35m'  # ارغوانی تیره
C = '\033[1;36m'  # فیروزه‌ای تیره
W = '\033[1;37m'  # سفید تیره
BR = '\033[1;91m' # قرمز روشن
BG = '\033[1;92m' # سبز روشن
BY = '\033[1;93m' # زرد روشن
BB = '\033[1;94m' # آبی روشن
BM = '\033[1;95m' # ارغوانی روشن
BC = '\033[1;96m' # فیروزه‌ای روشن
BW = '\033[1;97m' # سفید روشن
NC = '\033[0m'    # رنگ پیش‌فرض
def imroyd_welcome():
    # خوش‌آمدگویی با ASCII art
    imroyd_name = "   IMROYD"
    ascii_art = pyfiglet.figlet_format(imroyd_name, font="slant")
    print(f"{BB}{ascii_art}{NC}")

    imroyd_msg = f"      {BM}ساخته شده توسط امیر💎{NC}        "
    print(f"{imroyd_msg}{NC}")
    print("\n")

def amir_process(sss):
    # تابع پردازش هر auth
    try:
        imroyd = pyrubi.Client(auth=sss["auth"], private=sss["malek"], api_version=6, platform='android')
        maj = imroyd.get_me()
        return {
            "sss": sss,
            "phone": maj['user']['phone'],
            "success": True
        }
    except Exception as mao:
        error_message = str(mao)
        if "Incorrect padding" in error_message:
            try:
                fixed_malek = sss["malek"] + "=="
                imroyd = pyrubi.Client(auth=sss["auth"], private=fixed_malek, api_version=6, platform='android')
                maj = imroyd.get_me()
                return {
                    "sss": sss,
                    "phone": maj['user']['phone'],
                    "success": True
                }
            except Exception as mao:
                error_message = str(mao)
        return {
            "sss": sss,
            "error": error_message,
            "success": False
        }

def load_imroyd_auth(file_paths):
    # بارگذاری داده‌های JSON از فایل‌ها
    data = []
    for file_path in file_paths:
        try:
            with open(file_path, "r") as f:
                data.extend(json.load(f))
        except FileNotFoundError:
            print(f"{BR}✘ اوه! فایل {file_path} پیدا نشد.{NC}")
        except json.JSONDecodeError:
            print(f"{BR}✘ این فایل {file_path} مشکل داره و درست باز نمیشه.{NC}")
    return data

def remove_imroyd_duplicates(max):
    # حذف auths تکراری
    seen = set()
    unique_imroyds = []
    for sss in max:
        pair = (sss["auth"], sss["malek"])
        if pair not in seen:
            seen.add(pair)
            unique_imroyds.append(sss)
    return unique_imroyds

def amir_save(sss, mn):
    # ذخیره auth های موفق در یک فایل جدید
    try:
        with open(f"/storage/emulated/0/Download/{mn}.json", "w") as f:
            json.dump(sss, f)
        print(f"{BG}✔ فایل با نام {mn}.json ذخیره شد.{NC}")
    except Exception as mao:
        print(f"{BR}✘ نتونستم فایل رو ذخیره کنم. {str(mao)}{NC}")

def list_json_files(directory):
    # لیست کردن فایل‌های JSON در یک دایرکتوری
    return [os.path.join(directory, file) for file in os.listdir(directory) if file.endswith(".json")]

def get_file_list(directory):
    # نمایش فایل‌های موجود در دایرکتوری و انتخاب فایل‌ها
    json_files = list_json_files(directory)
    
    if not json_files:
        print(f"{BR}✘ هیچ فایل JSON تو {directory} پیدا نکردم.{NC}")
        return []

    print(f"{BY}➤ اینا فایل‌های JSON پیدا شده تو {directory}:{NC}")
    for i, file_path in enumerate(json_files, 1):
        print(f"{BY}{i}. {file_path}{NC}")

    print(f"{BC}✎ شماره فایل‌هایی که میخوای پردازش کنی رو بگو، با فاصله جدا کن (مثل '1 3 5'):{NC}")
    file_numbers = input().strip().split()

    selected_files = []
    for number in file_numbers:
        try:
            index = int(number) - 1
            if 0 <= index < len(json_files):
                selected_files.append(json_files[index])
            else:
                print(f"{BR}✘ شماره {number} نامعتبره!{NC}")
        except ValueError:
            print(f"{BR}✘ ورودی {number} معتبر نیست.{NC}")

    return selected_files

def main():
    imroyd_welcome()

    # دایرکتوری که فایل‌های JSON توش هست
    directory = "/storage/emulated/0/Download"

    # دریافت لیست فایل‌ها از دایرکتوری
    file_paths = get_file_list(directory)

    if not file_paths:
        print(f"{BR}✘ فایلی انتخاب نشد.{NC}")
        return

    # بارگذاری محتوای JSON از فایل‌ها
    max = load_imroyd_auth(file_paths)

    if not max:
        print(f"{BR}✘ هیچ auth درستی توی فایل‌ها پیدا نکردم.{NC}")
        return

    # حذف موارد تکراری
    max = remove_imroyd_duplicates(max)
    print(f"{BC}➤ تعداد کل auth های یکتا: {len(max)} {NC}")

    # پردازش auths
    sss_success = []
    with concurrent.futures.ThreadPoolExecutor(max_workers=100) as executor:
        futures = [executor.submit(amir_process, sss) for sss in max]

        for future in concurrent.futures.as_completed(futures):
            result = future.result()
            if result["success"]:
                sss_success.append(result["sss"])
                print(f"{BG}✔ AUTH درست: {result['sss']['auth']} \n - شماره تلفن: {result['phone']}{NC}")
            else:
                print(f"{BR}✘ AUTH مشکل‌دار: {result['sss']['auth']}\n - خطا: {result['error']}{NC}")

    # نمایش نتیجه نهایی
    print(f"{BM}▭▬▭▬▭▬▭▬▭▬▭ IMROYD ▬▭▬▭▬▭▬▭▬▭{NC}")
    print(f"{BG}✔ تعداد AUTH های درست: {len(sss_success)} {NC}")
    print(f"{BR}✘ تعداد AUTH های مشکل‌دار: {len(max) - len(sss_success)} {NC}")

    # گرفتن نام فایل خروجی از کاربر
    print(f"{BY}✎ یه اسم بده برای ذخیره AUTH های درست:{NC}")
    mn = input().strip()
    if mn:
        amir_save(sss_success, mn)

if __name__ == "__main__":
    main()
